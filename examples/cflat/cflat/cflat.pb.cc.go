// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: cflat.proto

/*
Package cflat contains
  *   chaincode methods names {service_name}Chaincode_{method_name}
  *   chaincode interface definition {service_name}Chaincode
  *   chaincode gateway definition {service_name}}Gateway
  *   chaincode service to cckit router registration func
*/
package cflat

import (
	context "context"
	_ "embed"
	errors "errors"

	cckit_gateway "github.com/s7techlab/cckit/gateway"
	cckit_router "github.com/s7techlab/cckit/router"
	cckit_defparam "github.com/s7techlab/cckit/router/param/defparam"
	cckit_sdk "github.com/s7techlab/cckit/sdk"
	"google.golang.org/protobuf/types/known/emptypb"
)

// CFlatServiceChaincode method names
const (

	// CFlatServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	CFlatServiceChaincodeMethodPrefix = "CFlatService."

	CFlatServiceChaincode_CreateFlat = CFlatServiceChaincodeMethodPrefix + "CreateFlat"

	CFlatServiceChaincode_UpdateFlat = CFlatServiceChaincodeMethodPrefix + "UpdateFlat"

	CFlatServiceChaincode_DeleteFlat = CFlatServiceChaincodeMethodPrefix + "DeleteFlat"

	CFlatServiceChaincode_GetFlat = CFlatServiceChaincodeMethodPrefix + "GetFlat"

	CFlatServiceChaincode_GetFlatView = CFlatServiceChaincodeMethodPrefix + "GetFlatView"

	CFlatServiceChaincode_ListFlats = CFlatServiceChaincodeMethodPrefix + "ListFlats"

	CFlatServiceChaincode_UpdateFlatResident = CFlatServiceChaincodeMethodPrefix + "UpdateFlatResident"

	CFlatServiceChaincode_DeleteFlatResident = CFlatServiceChaincodeMethodPrefix + "DeleteFlatResident"

	CFlatServiceChaincode_GetFlatResident = CFlatServiceChaincodeMethodPrefix + "GetFlatResident"

	CFlatServiceChaincode_ListFlatResidents = CFlatServiceChaincodeMethodPrefix + "ListFlatResidents"

	CFlatServiceChaincode_UpdateFlatRoom = CFlatServiceChaincodeMethodPrefix + "UpdateFlatRoom"

	CFlatServiceChaincode_DeleteFlatRoom = CFlatServiceChaincodeMethodPrefix + "DeleteFlatRoom"

	CFlatServiceChaincode_GetFlatRoom = CFlatServiceChaincodeMethodPrefix + "GetFlatRoom"

	CFlatServiceChaincode_ListFlatRooms = CFlatServiceChaincodeMethodPrefix + "ListFlatRooms"
)

// CFlatServiceChaincode chaincode methods interface
type CFlatServiceChaincode interface {
	CreateFlat(cckit_router.Context, *CreateFlatRequest) (*FlatView, error)

	UpdateFlat(cckit_router.Context, *UpdateFlatRequest) (*FlatView, error)

	DeleteFlat(cckit_router.Context, *FlatId) (*FlatView, error)

	GetFlat(cckit_router.Context, *FlatId) (*Flat, error)

	GetFlatView(cckit_router.Context, *FlatId) (*FlatView, error)

	ListFlats(cckit_router.Context, *emptypb.Empty) (*Flats, error)

	UpdateFlatResident(cckit_router.Context, *UpdateFlatResidentRequest) (*FlatResident, error)

	DeleteFlatResident(cckit_router.Context, *FlatResidentId) (*FlatResident, error)

	GetFlatResident(cckit_router.Context, *FlatResidentId) (*FlatResident, error)

	ListFlatResidents(cckit_router.Context, *FlatId) (*FlatResidents, error)

	UpdateFlatRoom(cckit_router.Context, *UpdateFlatRoomRequest) (*FlatRoom, error)

	DeleteFlatRoom(cckit_router.Context, *FlatRoomId) (*FlatRoom, error)

	GetFlatRoom(cckit_router.Context, *FlatRoomId) (*FlatRoom, error)

	ListFlatRooms(cckit_router.Context, *FlatId) (*FlatRooms, error)
}

// RegisterCFlatServiceChaincode registers service methods as chaincode router handlers
func RegisterCFlatServiceChaincode(r *cckit_router.Group, cc CFlatServiceChaincode) error {

	r.Invoke(CFlatServiceChaincode_CreateFlat,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.CreateFlat(ctx, ctx.Param().(*CreateFlatRequest))
		},
		cckit_defparam.Proto(&CreateFlatRequest{}))

	r.Invoke(CFlatServiceChaincode_UpdateFlat,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.UpdateFlat(ctx, ctx.Param().(*UpdateFlatRequest))
		},
		cckit_defparam.Proto(&UpdateFlatRequest{}))

	r.Invoke(CFlatServiceChaincode_DeleteFlat,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.DeleteFlat(ctx, ctx.Param().(*FlatId))
		},
		cckit_defparam.Proto(&FlatId{}))

	r.Query(CFlatServiceChaincode_GetFlat,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetFlat(ctx, ctx.Param().(*FlatId))
		},
		cckit_defparam.Proto(&FlatId{}))

	r.Query(CFlatServiceChaincode_GetFlatView,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetFlatView(ctx, ctx.Param().(*FlatId))
		},
		cckit_defparam.Proto(&FlatId{}))

	r.Query(CFlatServiceChaincode_ListFlats,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.ListFlats(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Invoke(CFlatServiceChaincode_UpdateFlatResident,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.UpdateFlatResident(ctx, ctx.Param().(*UpdateFlatResidentRequest))
		},
		cckit_defparam.Proto(&UpdateFlatResidentRequest{}))

	r.Invoke(CFlatServiceChaincode_DeleteFlatResident,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.DeleteFlatResident(ctx, ctx.Param().(*FlatResidentId))
		},
		cckit_defparam.Proto(&FlatResidentId{}))

	r.Query(CFlatServiceChaincode_GetFlatResident,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetFlatResident(ctx, ctx.Param().(*FlatResidentId))
		},
		cckit_defparam.Proto(&FlatResidentId{}))

	r.Query(CFlatServiceChaincode_ListFlatResidents,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.ListFlatResidents(ctx, ctx.Param().(*FlatId))
		},
		cckit_defparam.Proto(&FlatId{}))

	r.Invoke(CFlatServiceChaincode_UpdateFlatRoom,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.UpdateFlatRoom(ctx, ctx.Param().(*UpdateFlatRoomRequest))
		},
		cckit_defparam.Proto(&UpdateFlatRoomRequest{}))

	r.Invoke(CFlatServiceChaincode_DeleteFlatRoom,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.DeleteFlatRoom(ctx, ctx.Param().(*FlatRoomId))
		},
		cckit_defparam.Proto(&FlatRoomId{}))

	r.Query(CFlatServiceChaincode_GetFlatRoom,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetFlatRoom(ctx, ctx.Param().(*FlatRoomId))
		},
		cckit_defparam.Proto(&FlatRoomId{}))

	r.Query(CFlatServiceChaincode_ListFlatRooms,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.ListFlatRooms(ctx, ctx.Param().(*FlatId))
		},
		cckit_defparam.Proto(&FlatId{}))

	return nil
}

//go:embed cflat.swagger.json
var CFlatServiceSwagger []byte

// NewCFlatServiceGateway creates gateway to access chaincode method via chaincode service
func NewCFlatServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *CFlatServiceGateway {
	return NewCFlatServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewCFlatServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *CFlatServiceGateway {
	return &CFlatServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type CFlatServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *CFlatServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *CFlatServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_CFlatService_serviceDesc.ServiceName,
		CFlatServiceSwagger,
		&_CFlatService_serviceDesc,
		c,
		RegisterCFlatServiceHandlerFromEndpoint,
	)
}

func (c *CFlatServiceGateway) CreateFlat(ctx context.Context, in *CreateFlatRequest) (*FlatView, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_CreateFlat, []interface{}{in}, &FlatView{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatView), nil
	}
}

func (c *CFlatServiceGateway) UpdateFlat(ctx context.Context, in *UpdateFlatRequest) (*FlatView, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_UpdateFlat, []interface{}{in}, &FlatView{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatView), nil
	}
}

func (c *CFlatServiceGateway) DeleteFlat(ctx context.Context, in *FlatId) (*FlatView, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_DeleteFlat, []interface{}{in}, &FlatView{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatView), nil
	}
}

func (c *CFlatServiceGateway) GetFlat(ctx context.Context, in *FlatId) (*Flat, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_GetFlat, []interface{}{in}, &Flat{}); err != nil {
		return nil, err
	} else {
		return res.(*Flat), nil
	}
}

func (c *CFlatServiceGateway) GetFlatView(ctx context.Context, in *FlatId) (*FlatView, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_GetFlatView, []interface{}{in}, &FlatView{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatView), nil
	}
}

func (c *CFlatServiceGateway) ListFlats(ctx context.Context, in *emptypb.Empty) (*Flats, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_ListFlats, []interface{}{in}, &Flats{}); err != nil {
		return nil, err
	} else {
		return res.(*Flats), nil
	}
}

func (c *CFlatServiceGateway) UpdateFlatResident(ctx context.Context, in *UpdateFlatResidentRequest) (*FlatResident, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_UpdateFlatResident, []interface{}{in}, &FlatResident{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResident), nil
	}
}

func (c *CFlatServiceGateway) DeleteFlatResident(ctx context.Context, in *FlatResidentId) (*FlatResident, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_DeleteFlatResident, []interface{}{in}, &FlatResident{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResident), nil
	}
}

func (c *CFlatServiceGateway) GetFlatResident(ctx context.Context, in *FlatResidentId) (*FlatResident, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_GetFlatResident, []interface{}{in}, &FlatResident{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResident), nil
	}
}

func (c *CFlatServiceGateway) ListFlatResidents(ctx context.Context, in *FlatId) (*FlatResidents, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_ListFlatResidents, []interface{}{in}, &FlatResidents{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResidents), nil
	}
}

func (c *CFlatServiceGateway) UpdateFlatRoom(ctx context.Context, in *UpdateFlatRoomRequest) (*FlatRoom, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_UpdateFlatRoom, []interface{}{in}, &FlatRoom{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRoom), nil
	}
}

func (c *CFlatServiceGateway) DeleteFlatRoom(ctx context.Context, in *FlatRoomId) (*FlatRoom, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, CFlatServiceChaincode_DeleteFlatRoom, []interface{}{in}, &FlatRoom{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRoom), nil
	}
}

func (c *CFlatServiceGateway) GetFlatRoom(ctx context.Context, in *FlatRoomId) (*FlatRoom, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_GetFlatRoom, []interface{}{in}, &FlatRoom{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRoom), nil
	}
}

func (c *CFlatServiceGateway) ListFlatRooms(ctx context.Context, in *FlatId) (*FlatRooms, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CFlatServiceChaincode_ListFlatRooms, []interface{}{in}, &FlatRooms{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRooms), nil
	}
}

// CFlatServiceChaincodeResolver interface for service resolver
type (
	CFlatServiceChaincodeResolver interface {
		Resolve(ctx cckit_router.Context) (CFlatServiceChaincode, error)
	}

	CFlatServiceChaincodeLocalResolver struct {
		service CFlatServiceChaincode
	}

	CFlatServiceChaincodeLocatorResolver struct {
		locatorResolver cckit_gateway.ChaincodeLocatorResolver
		service         CFlatServiceChaincode
	}
)

func NewCFlatServiceChaincodeLocalResolver(service CFlatServiceChaincode) *CFlatServiceChaincodeLocalResolver {
	return &CFlatServiceChaincodeLocalResolver{
		service: service,
	}
}

func (r *CFlatServiceChaincodeLocalResolver) Resolve(ctx cckit_router.Context) (CFlatServiceChaincode, error) {
	if r.service == nil {
		return nil, errors.New("service not set for local chaincode resolver")
	}

	return r.service, nil
}

func NewCFlatServiceChaincodeResolver(locatorResolver cckit_gateway.ChaincodeLocatorResolver) *CFlatServiceChaincodeLocatorResolver {
	return &CFlatServiceChaincodeLocatorResolver{
		locatorResolver: locatorResolver,
	}
}

func (r *CFlatServiceChaincodeLocatorResolver) Resolve(ctx cckit_router.Context) (CFlatServiceChaincode, error) {
	if r.service != nil {
		return r.service, nil
	}

	locator, err := r.locatorResolver(ctx, _CFlatService_serviceDesc.ServiceName)
	if err != nil {
		return nil, err
	}

	r.service = NewCFlatServiceChaincodeStubInvoker(locator)
	return r.service, nil
}

type CFlatServiceChaincodeStubInvoker struct {
	Invoker cckit_gateway.ChaincodeStubInvoker
}

func NewCFlatServiceChaincodeStubInvoker(locator *cckit_gateway.ChaincodeLocator) *CFlatServiceChaincodeStubInvoker {
	return &CFlatServiceChaincodeStubInvoker{
		Invoker: &cckit_gateway.LocatorChaincodeStubInvoker{Locator: locator},
	}
}

func (c *CFlatServiceChaincodeStubInvoker) CreateFlat(ctx cckit_router.Context, in *CreateFlatRequest) (*FlatView, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) UpdateFlat(ctx cckit_router.Context, in *UpdateFlatRequest) (*FlatView, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) DeleteFlat(ctx cckit_router.Context, in *FlatId) (*FlatView, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) GetFlat(ctx cckit_router.Context, in *FlatId) (*Flat, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_GetFlat, []interface{}{in}, &Flat{}); err != nil {
		return nil, err
	} else {
		return res.(*Flat), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) GetFlatView(ctx cckit_router.Context, in *FlatId) (*FlatView, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_GetFlatView, []interface{}{in}, &FlatView{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatView), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) ListFlats(ctx cckit_router.Context, in *emptypb.Empty) (*Flats, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_ListFlats, []interface{}{in}, &Flats{}); err != nil {
		return nil, err
	} else {
		return res.(*Flats), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) UpdateFlatResident(ctx cckit_router.Context, in *UpdateFlatResidentRequest) (*FlatResident, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) DeleteFlatResident(ctx cckit_router.Context, in *FlatResidentId) (*FlatResident, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) GetFlatResident(ctx cckit_router.Context, in *FlatResidentId) (*FlatResident, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_GetFlatResident, []interface{}{in}, &FlatResident{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResident), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) ListFlatResidents(ctx cckit_router.Context, in *FlatId) (*FlatResidents, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_ListFlatResidents, []interface{}{in}, &FlatResidents{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatResidents), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) UpdateFlatRoom(ctx cckit_router.Context, in *UpdateFlatRoomRequest) (*FlatRoom, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) DeleteFlatRoom(ctx cckit_router.Context, in *FlatRoomId) (*FlatRoom, error) {

	return nil, cckit_gateway.ErrInvokeMethodNotAllowed

}

func (c *CFlatServiceChaincodeStubInvoker) GetFlatRoom(ctx cckit_router.Context, in *FlatRoomId) (*FlatRoom, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_GetFlatRoom, []interface{}{in}, &FlatRoom{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRoom), nil
	}

}

func (c *CFlatServiceChaincodeStubInvoker) ListFlatRooms(ctx cckit_router.Context, in *FlatId) (*FlatRooms, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CFlatServiceChaincode_ListFlatRooms, []interface{}{in}, &FlatRooms{}); err != nil {
		return nil, err
	} else {
		return res.(*FlatRooms), nil
	}

}
