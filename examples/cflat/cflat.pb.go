// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: cflat.proto

package cflat

import (
	context "context"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dictionaries
type PropertyType int32

const (
	PropertyType_PRIVATE PropertyType = 0
	PropertyType_STATE   PropertyType = 1
)

// Enum value maps for PropertyType.
var (
	PropertyType_name = map[int32]string{
		0: "PRIVATE",
		1: "STATE",
	}
	PropertyType_value = map[string]int32{
		"PRIVATE": 0,
		"STATE":   1,
	}
)

func (x PropertyType) Enum() *PropertyType {
	p := new(PropertyType)
	*p = x
	return p
}

func (x PropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_cflat_proto_enumTypes[0].Descriptor()
}

func (PropertyType) Type() protoreflect.EnumType {
	return &file_cflat_proto_enumTypes[0]
}

func (x PropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyType.Descriptor instead.
func (PropertyType) EnumDescriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{0}
}

type AccommodationType int32

const (
	AccommodationType_UNREGISTERED AccommodationType = 0
	AccommodationType_REGISTERED   AccommodationType = 1
	AccommodationType_RENT         AccommodationType = 2
)

// Enum value maps for AccommodationType.
var (
	AccommodationType_name = map[int32]string{
		0: "UNREGISTERED",
		1: "REGISTERED",
		2: "RENT",
	}
	AccommodationType_value = map[string]int32{
		"UNREGISTERED": 0,
		"REGISTERED":   1,
		"RENT":         2,
	}
)

func (x AccommodationType) Enum() *AccommodationType {
	p := new(AccommodationType)
	*p = x
	return p
}

func (x AccommodationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccommodationType) Descriptor() protoreflect.EnumDescriptor {
	return file_cflat_proto_enumTypes[1].Descriptor()
}

func (AccommodationType) Type() protoreflect.EnumType {
	return &file_cflat_proto_enumTypes[1]
}

func (x AccommodationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccommodationType.Descriptor instead.
func (AccommodationType) EnumDescriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{1}
}

type RoomType int32

const (
	RoomType_KITCHEN  RoomType = 0
	RoomType_LIVING   RoomType = 1
	RoomType_DINING   RoomType = 2
	RoomType_BATHROOM RoomType = 3
	RoomType_BEDROOM  RoomType = 4
	RoomType_HALLWAY  RoomType = 5
	RoomType_NURSERY  RoomType = 6
)

// Enum value maps for RoomType.
var (
	RoomType_name = map[int32]string{
		0: "KITCHEN",
		1: "LIVING",
		2: "DINING",
		3: "BATHROOM",
		4: "BEDROOM",
		5: "HALLWAY",
		6: "NURSERY",
	}
	RoomType_value = map[string]int32{
		"KITCHEN":  0,
		"LIVING":   1,
		"DINING":   2,
		"BATHROOM": 3,
		"BEDROOM":  4,
		"HALLWAY":  5,
		"NURSERY":  6,
	}
)

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}

func (x RoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_cflat_proto_enumTypes[2].Descriptor()
}

func (RoomType) Type() protoreflect.EnumType {
	return &file_cflat_proto_enumTypes[2]
}

func (x RoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomType.Descriptor instead.
func (RoomType) EnumDescriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{2}
}

// Entities
type CreateFlatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country   string             `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region    string             `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City      string             `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Street    string             `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	HouseNum  uint64             `protobuf:"varint,5,opt,name=house_num,json=houseNum,proto3" json:"house_num,omitempty"`
	FlatNum   uint64             `protobuf:"varint,6,opt,name=flat_num,json=flatNum,proto3" json:"flat_num,omitempty"`
	Type      PropertyType       `protobuf:"varint,7,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	Residents []*SetFlatResident `protobuf:"bytes,8,rep,name=residents,proto3" json:"residents,omitempty"`
	Rooms     []*SetFlatRoom     `protobuf:"bytes,9,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *CreateFlatRequest) Reset() {
	*x = CreateFlatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlatRequest) ProtoMessage() {}

func (x *CreateFlatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlatRequest.ProtoReflect.Descriptor instead.
func (*CreateFlatRequest) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFlatRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateFlatRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateFlatRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateFlatRequest) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *CreateFlatRequest) GetHouseNum() uint64 {
	if x != nil {
		return x.HouseNum
	}
	return 0
}

func (x *CreateFlatRequest) GetFlatNum() uint64 {
	if x != nil {
		return x.FlatNum
	}
	return 0
}

func (x *CreateFlatRequest) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *CreateFlatRequest) GetResidents() []*SetFlatResident {
	if x != nil {
		return x.Residents
	}
	return nil
}

func (x *CreateFlatRequest) GetRooms() []*SetFlatRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type UpdateFlatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []string           `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Type      PropertyType       `protobuf:"varint,2,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	Residents []*SetFlatResident `protobuf:"bytes,3,rep,name=residents,proto3" json:"residents,omitempty"`
	Rooms     []*SetFlatRoom     `protobuf:"bytes,4,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *UpdateFlatRequest) Reset() {
	*x = UpdateFlatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlatRequest) ProtoMessage() {}

func (x *UpdateFlatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlatRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlatRequest) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateFlatRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateFlatRequest) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *UpdateFlatRequest) GetResidents() []*SetFlatResident {
	if x != nil {
		return x.Residents
	}
	return nil
}

func (x *UpdateFlatRequest) GetRooms() []*SetFlatRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type SetFlatResident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName  string            `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	SecondName string            `protobuf:"bytes,2,opt,name=second_name,json=secondName,proto3" json:"second_name,omitempty"`
	Type       AccommodationType `protobuf:"varint,3,opt,name=type,proto3,enum=examples.cflat.AccommodationType" json:"type,omitempty"`
}

func (x *SetFlatResident) Reset() {
	*x = SetFlatResident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlatResident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlatResident) ProtoMessage() {}

func (x *SetFlatResident) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlatResident.ProtoReflect.Descriptor instead.
func (*SetFlatResident) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{2}
}

func (x *SetFlatResident) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SetFlatResident) GetSecondName() string {
	if x != nil {
		return x.SecondName
	}
	return ""
}

func (x *SetFlatResident) GetType() AccommodationType {
	if x != nil {
		return x.Type
	}
	return AccommodationType_UNREGISTERED
}

type SetFlatRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RoomType `protobuf:"varint,1,opt,name=type,proto3,enum=examples.cflat.RoomType" json:"type,omitempty"`
	Area uint64   `protobuf:"varint,2,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *SetFlatRoom) Reset() {
	*x = SetFlatRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlatRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlatRoom) ProtoMessage() {}

func (x *SetFlatRoom) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlatRoom.ProtoReflect.Descriptor instead.
func (*SetFlatRoom) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{3}
}

func (x *SetFlatRoom) GetType() RoomType {
	if x != nil {
		return x.Type
	}
	return RoomType_KITCHEN
}

func (x *SetFlatRoom) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

type FlatView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flat      *Flat          `protobuf:"bytes,1,opt,name=flat,proto3" json:"flat,omitempty"`
	Residents *FlatResidents `protobuf:"bytes,2,opt,name=residents,proto3" json:"residents,omitempty"`
	Rooms     *FlatRooms     `protobuf:"bytes,3,opt,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *FlatView) Reset() {
	*x = FlatView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatView) ProtoMessage() {}

func (x *FlatView) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatView.ProtoReflect.Descriptor instead.
func (*FlatView) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{4}
}

func (x *FlatView) GetFlat() *Flat {
	if x != nil {
		return x.Flat
	}
	return nil
}

func (x *FlatView) GetResidents() *FlatResidents {
	if x != nil {
		return x.Residents
	}
	return nil
}

func (x *FlatView) GetRooms() *FlatRooms {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type Flat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []string               `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Country           string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Region            string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City              string                 `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street            string                 `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	HouseNum          uint64                 `protobuf:"varint,6,opt,name=house_num,json=houseNum,proto3" json:"house_num,omitempty"`
	FlatNum           uint64                 `protobuf:"varint,7,opt,name=flat_num,json=flatNum,proto3" json:"flat_num,omitempty"`
	Type              PropertyType           `protobuf:"varint,8,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	ResidentsQuantity uint64                 `protobuf:"varint,9,opt,name=residents_quantity,json=residentsQuantity,proto3" json:"residents_quantity,omitempty"`
	Area              uint64                 `protobuf:"varint,10,opt,name=area,proto3" json:"area,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Flat) Reset() {
	*x = Flat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flat) ProtoMessage() {}

func (x *Flat) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flat.ProtoReflect.Descriptor instead.
func (*Flat) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{5}
}

func (x *Flat) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Flat) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Flat) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Flat) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Flat) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Flat) GetHouseNum() uint64 {
	if x != nil {
		return x.HouseNum
	}
	return 0
}

func (x *Flat) GetFlatNum() uint64 {
	if x != nil {
		return x.FlatNum
	}
	return 0
}

func (x *Flat) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *Flat) GetResidentsQuantity() uint64 {
	if x != nil {
		return x.ResidentsQuantity
	}
	return 0
}

func (x *Flat) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *Flat) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FlatResident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId []string `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	//  repeated string resident_id = 2 [(validator.field) = {repeated_count_min: 1}];
	FirstName  string                 `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	SecondName string                 `protobuf:"bytes,4,opt,name=second_name,json=secondName,proto3" json:"second_name,omitempty"`
	Type       AccommodationType      `protobuf:"varint,5,opt,name=type,proto3,enum=examples.cflat.AccommodationType" json:"type,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FlatResident) Reset() {
	*x = FlatResident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatResident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatResident) ProtoMessage() {}

func (x *FlatResident) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatResident.ProtoReflect.Descriptor instead.
func (*FlatResident) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{6}
}

func (x *FlatResident) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatResident) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *FlatResident) GetSecondName() string {
	if x != nil {
		return x.SecondName
	}
	return ""
}

func (x *FlatResident) GetType() AccommodationType {
	if x != nil {
		return x.Type
	}
	return AccommodationType_UNREGISTERED
}

func (x *FlatResident) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FlatRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId []string `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	//  repeated string room_id = 2 [(validator.field) = {repeated_count_min: 1}];
	Type      RoomType               `protobuf:"varint,3,opt,name=type,proto3,enum=examples.cflat.RoomType" json:"type,omitempty"`
	Area      uint64                 `protobuf:"varint,4,opt,name=area,proto3" json:"area,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FlatRoom) Reset() {
	*x = FlatRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRoom) ProtoMessage() {}

func (x *FlatRoom) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRoom.ProtoReflect.Descriptor instead.
func (*FlatRoom) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{7}
}

func (x *FlatRoom) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatRoom) GetType() RoomType {
	if x != nil {
		return x.Type
	}
	return RoomType_KITCHEN
}

func (x *FlatRoom) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *FlatRoom) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FlatId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *FlatId) Reset() {
	*x = FlatId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatId) ProtoMessage() {}

func (x *FlatId) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatId.ProtoReflect.Descriptor instead.
func (*FlatId) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{8}
}

func (x *FlatId) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type Flats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flats []*Flat `protobuf:"bytes,1,rep,name=flats,proto3" json:"flats,omitempty"`
}

func (x *Flats) Reset() {
	*x = Flats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flats) ProtoMessage() {}

func (x *Flats) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flats.ProtoReflect.Descriptor instead.
func (*Flats) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{9}
}

func (x *Flats) GetFlats() []*Flat {
	if x != nil {
		return x.Flats
	}
	return nil
}

type UpdateFlatResidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId    []string           `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	Residents []*SetFlatResident `protobuf:"bytes,2,rep,name=residents,proto3" json:"residents,omitempty"`
}

func (x *UpdateFlatResidentRequest) Reset() {
	*x = UpdateFlatResidentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlatResidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlatResidentRequest) ProtoMessage() {}

func (x *UpdateFlatResidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlatResidentRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlatResidentRequest) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFlatResidentRequest) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *UpdateFlatResidentRequest) GetResidents() []*SetFlatResident {
	if x != nil {
		return x.Residents
	}
	return nil
}

type FlatResidentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId     []string `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	ResidentId []string `protobuf:"bytes,2,rep,name=resident_id,json=residentId,proto3" json:"resident_id,omitempty"`
}

func (x *FlatResidentId) Reset() {
	*x = FlatResidentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatResidentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatResidentId) ProtoMessage() {}

func (x *FlatResidentId) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatResidentId.ProtoReflect.Descriptor instead.
func (*FlatResidentId) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{11}
}

func (x *FlatResidentId) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatResidentId) GetResidentId() []string {
	if x != nil {
		return x.ResidentId
	}
	return nil
}

type FlatResidents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Residents []*FlatResident `protobuf:"bytes,1,rep,name=residents,proto3" json:"residents,omitempty"`
}

func (x *FlatResidents) Reset() {
	*x = FlatResidents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatResidents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatResidents) ProtoMessage() {}

func (x *FlatResidents) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatResidents.ProtoReflect.Descriptor instead.
func (*FlatResidents) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{12}
}

func (x *FlatResidents) GetResidents() []*FlatResident {
	if x != nil {
		return x.Residents
	}
	return nil
}

type UpdateFlatRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId []string       `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	Rooms  []*SetFlatRoom `protobuf:"bytes,2,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *UpdateFlatRoomRequest) Reset() {
	*x = UpdateFlatRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlatRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlatRoomRequest) ProtoMessage() {}

func (x *UpdateFlatRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlatRoomRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlatRoomRequest) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFlatRoomRequest) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *UpdateFlatRoomRequest) GetRooms() []*SetFlatRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type FlatRoomId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId []string `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	RoomId []string `protobuf:"bytes,2,rep,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *FlatRoomId) Reset() {
	*x = FlatRoomId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatRoomId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRoomId) ProtoMessage() {}

func (x *FlatRoomId) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRoomId.ProtoReflect.Descriptor instead.
func (*FlatRoomId) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{14}
}

func (x *FlatRoomId) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatRoomId) GetRoomId() []string {
	if x != nil {
		return x.RoomId
	}
	return nil
}

type FlatRooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*FlatRoom `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *FlatRooms) Reset() {
	*x = FlatRooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatRooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRooms) ProtoMessage() {}

func (x *FlatRooms) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRooms.ProtoReflect.Descriptor instead.
func (*FlatRooms) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{15}
}

func (x *FlatRooms) GetRooms() []*FlatRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

// Events
type FlatCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []string     `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Country           string       `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Region            string       `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City              string       `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street            string       `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	HouseNum          uint64       `protobuf:"varint,6,opt,name=house_num,json=houseNum,proto3" json:"house_num,omitempty"`
	FlatNum           uint64       `protobuf:"varint,7,opt,name=flat_num,json=flatNum,proto3" json:"flat_num,omitempty"`
	Type              PropertyType `protobuf:"varint,8,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	ResidentsQuantity uint64       `protobuf:"varint,9,opt,name=residents_quantity,json=residentsQuantity,proto3" json:"residents_quantity,omitempty"`
	Area              uint64       `protobuf:"varint,10,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *FlatCreated) Reset() {
	*x = FlatCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatCreated) ProtoMessage() {}

func (x *FlatCreated) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatCreated.ProtoReflect.Descriptor instead.
func (*FlatCreated) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{16}
}

func (x *FlatCreated) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlatCreated) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FlatCreated) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *FlatCreated) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *FlatCreated) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *FlatCreated) GetHouseNum() uint64 {
	if x != nil {
		return x.HouseNum
	}
	return 0
}

func (x *FlatCreated) GetFlatNum() uint64 {
	if x != nil {
		return x.FlatNum
	}
	return 0
}

func (x *FlatCreated) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *FlatCreated) GetResidentsQuantity() uint64 {
	if x != nil {
		return x.ResidentsQuantity
	}
	return 0
}

func (x *FlatCreated) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

type FlatDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []string       `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Country           string         `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Region            string         `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City              string         `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street            string         `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	HouseNum          uint64         `protobuf:"varint,6,opt,name=house_num,json=houseNum,proto3" json:"house_num,omitempty"`
	FlatNum           uint64         `protobuf:"varint,7,opt,name=flat_num,json=flatNum,proto3" json:"flat_num,omitempty"`
	Type              PropertyType   `protobuf:"varint,8,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	ResidentsQuantity uint64         `protobuf:"varint,9,opt,name=residents_quantity,json=residentsQuantity,proto3" json:"residents_quantity,omitempty"`
	Area              uint64         `protobuf:"varint,10,opt,name=area,proto3" json:"area,omitempty"`
	Residents         *FlatResidents `protobuf:"bytes,11,opt,name=residents,proto3" json:"residents,omitempty"`
	Rooms             *FlatRooms     `protobuf:"bytes,12,opt,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *FlatDeleted) Reset() {
	*x = FlatDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatDeleted) ProtoMessage() {}

func (x *FlatDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatDeleted.ProtoReflect.Descriptor instead.
func (*FlatDeleted) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{17}
}

func (x *FlatDeleted) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlatDeleted) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FlatDeleted) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *FlatDeleted) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *FlatDeleted) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *FlatDeleted) GetHouseNum() uint64 {
	if x != nil {
		return x.HouseNum
	}
	return 0
}

func (x *FlatDeleted) GetFlatNum() uint64 {
	if x != nil {
		return x.FlatNum
	}
	return 0
}

func (x *FlatDeleted) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *FlatDeleted) GetResidentsQuantity() uint64 {
	if x != nil {
		return x.ResidentsQuantity
	}
	return 0
}

func (x *FlatDeleted) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *FlatDeleted) GetResidents() *FlatResidents {
	if x != nil {
		return x.Residents
	}
	return nil
}

func (x *FlatDeleted) GetRooms() *FlatRooms {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type FlatUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []string     `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Type              PropertyType `protobuf:"varint,2,opt,name=type,proto3,enum=examples.cflat.PropertyType" json:"type,omitempty"`
	ResidentsQuantity uint64       `protobuf:"varint,3,opt,name=residents_quantity,json=residentsQuantity,proto3" json:"residents_quantity,omitempty"`
	Area              uint64       `protobuf:"varint,4,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *FlatUpdated) Reset() {
	*x = FlatUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatUpdated) ProtoMessage() {}

func (x *FlatUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatUpdated.ProtoReflect.Descriptor instead.
func (*FlatUpdated) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{18}
}

func (x *FlatUpdated) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlatUpdated) GetType() PropertyType {
	if x != nil {
		return x.Type
	}
	return PropertyType_PRIVATE
}

func (x *FlatUpdated) GetResidentsQuantity() uint64 {
	if x != nil {
		return x.ResidentsQuantity
	}
	return 0
}

func (x *FlatUpdated) GetArea() uint64 {
	if x != nil {
		return x.Area
	}
	return 0
}

type FlatResidentsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId    []string       `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	Residents *FlatResidents `protobuf:"bytes,2,opt,name=residents,proto3" json:"residents,omitempty"`
}

func (x *FlatResidentsUpdated) Reset() {
	*x = FlatResidentsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatResidentsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatResidentsUpdated) ProtoMessage() {}

func (x *FlatResidentsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatResidentsUpdated.ProtoReflect.Descriptor instead.
func (*FlatResidentsUpdated) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{19}
}

func (x *FlatResidentsUpdated) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatResidentsUpdated) GetResidents() *FlatResidents {
	if x != nil {
		return x.Residents
	}
	return nil
}

type FlatResidentsDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlatResidentsDeleted) Reset() {
	*x = FlatResidentsDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatResidentsDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatResidentsDeleted) ProtoMessage() {}

func (x *FlatResidentsDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatResidentsDeleted.ProtoReflect.Descriptor instead.
func (*FlatResidentsDeleted) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{20}
}

type FlatRoomsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatId []string   `protobuf:"bytes,1,rep,name=flat_id,json=flatId,proto3" json:"flat_id,omitempty"`
	Rooms  *FlatRooms `protobuf:"bytes,2,opt,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *FlatRoomsUpdated) Reset() {
	*x = FlatRoomsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatRoomsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRoomsUpdated) ProtoMessage() {}

func (x *FlatRoomsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRoomsUpdated.ProtoReflect.Descriptor instead.
func (*FlatRoomsUpdated) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{21}
}

func (x *FlatRoomsUpdated) GetFlatId() []string {
	if x != nil {
		return x.FlatId
	}
	return nil
}

func (x *FlatRoomsUpdated) GetRooms() *FlatRooms {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type FlatRoomsDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlatRoomsDeleted) Reset() {
	*x = FlatRoomsDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cflat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatRoomsDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRoomsDeleted) ProtoMessage() {}

func (x *FlatRoomsDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_cflat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRoomsDeleted.ProtoReflect.Descriptor instead.
func (*FlatRoomsDeleted) Descriptor() ([]byte, []int) {
	return file_cflat_proto_rawDescGZIP(), []int{22}
}

var File_cflat_proto protoreflect.FileDescriptor

var file_cflat_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x08, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x08, 0x66, 0x6c,
	0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66,
	0x6c, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x60, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x60, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x60, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22,
	0xa2, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66,
	0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x05, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x08,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x20, 0x0a, 0x06, 0x46, 0x6c,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x74,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x60, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x73, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x60, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x05,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x06, 0x66, 0x6c,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x60, 0x01, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c,
	0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0x96, 0x03,
	0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c,
	0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52,
	0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0x6c, 0x0a, 0x14, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74,
	0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x5c, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22,
	0x12, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x2a, 0x26, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x54, 0x43,
	0x48, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x41, 0x54, 0x48, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x45, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x4c,
	0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x52, 0x53, 0x45, 0x52, 0x59,
	0x10, 0x06, 0x32, 0x9a, 0x0c, 0x0a, 0x0c, 0x43, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x74, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c,
	0x61, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66,
	0x6c, 0x61, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f, 0x63, 0x66, 0x6c,
	0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x59, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x16,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e,
	0x46, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74,
	0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x52, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x14,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e,
	0x46, 0x6c, 0x61, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x5f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e,
	0x46, 0x6c, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74,
	0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x50, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x73, 0x22, 0x14, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61,
	0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f, 0x63, 0x66, 0x6c,
	0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x63, 0x66, 0x6c, 0x61,
	0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1c, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74,
	0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x49, 0x64,
	0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61,
	0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f,
	0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a,
	0x1c, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x76, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74,
	0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61,
	0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x12, 0x26, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x74, 0x73,
	0x2f, 0x7b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x2f, 0x7b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x63, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61,
	0x74, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x63,
	0x66, 0x6c, 0x61, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x2f, 0x66,
	0x6c, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x63, 0x66, 0x6c, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cflat_proto_rawDescOnce sync.Once
	file_cflat_proto_rawDescData = file_cflat_proto_rawDesc
)

func file_cflat_proto_rawDescGZIP() []byte {
	file_cflat_proto_rawDescOnce.Do(func() {
		file_cflat_proto_rawDescData = protoimpl.X.CompressGZIP(file_cflat_proto_rawDescData)
	})
	return file_cflat_proto_rawDescData
}

var file_cflat_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cflat_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cflat_proto_goTypes = []interface{}{
	(PropertyType)(0),                 // 0: examples.cflat.PropertyType
	(AccommodationType)(0),            // 1: examples.cflat.AccommodationType
	(RoomType)(0),                     // 2: examples.cflat.RoomType
	(*CreateFlatRequest)(nil),         // 3: examples.cflat.CreateFlatRequest
	(*UpdateFlatRequest)(nil),         // 4: examples.cflat.UpdateFlatRequest
	(*SetFlatResident)(nil),           // 5: examples.cflat.SetFlatResident
	(*SetFlatRoom)(nil),               // 6: examples.cflat.SetFlatRoom
	(*FlatView)(nil),                  // 7: examples.cflat.FlatView
	(*Flat)(nil),                      // 8: examples.cflat.Flat
	(*FlatResident)(nil),              // 9: examples.cflat.FlatResident
	(*FlatRoom)(nil),                  // 10: examples.cflat.FlatRoom
	(*FlatId)(nil),                    // 11: examples.cflat.FlatId
	(*Flats)(nil),                     // 12: examples.cflat.Flats
	(*UpdateFlatResidentRequest)(nil), // 13: examples.cflat.UpdateFlatResidentRequest
	(*FlatResidentId)(nil),            // 14: examples.cflat.FlatResidentId
	(*FlatResidents)(nil),             // 15: examples.cflat.FlatResidents
	(*UpdateFlatRoomRequest)(nil),     // 16: examples.cflat.UpdateFlatRoomRequest
	(*FlatRoomId)(nil),                // 17: examples.cflat.FlatRoomId
	(*FlatRooms)(nil),                 // 18: examples.cflat.FlatRooms
	(*FlatCreated)(nil),               // 19: examples.cflat.FlatCreated
	(*FlatDeleted)(nil),               // 20: examples.cflat.FlatDeleted
	(*FlatUpdated)(nil),               // 21: examples.cflat.FlatUpdated
	(*FlatResidentsUpdated)(nil),      // 22: examples.cflat.FlatResidentsUpdated
	(*FlatResidentsDeleted)(nil),      // 23: examples.cflat.FlatResidentsDeleted
	(*FlatRoomsUpdated)(nil),          // 24: examples.cflat.FlatRoomsUpdated
	(*FlatRoomsDeleted)(nil),          // 25: examples.cflat.FlatRoomsDeleted
	(*timestamppb.Timestamp)(nil),     // 26: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 27: google.protobuf.Empty
}
var file_cflat_proto_depIdxs = []int32{
	0,  // 0: examples.cflat.CreateFlatRequest.type:type_name -> examples.cflat.PropertyType
	5,  // 1: examples.cflat.CreateFlatRequest.residents:type_name -> examples.cflat.SetFlatResident
	6,  // 2: examples.cflat.CreateFlatRequest.rooms:type_name -> examples.cflat.SetFlatRoom
	0,  // 3: examples.cflat.UpdateFlatRequest.type:type_name -> examples.cflat.PropertyType
	5,  // 4: examples.cflat.UpdateFlatRequest.residents:type_name -> examples.cflat.SetFlatResident
	6,  // 5: examples.cflat.UpdateFlatRequest.rooms:type_name -> examples.cflat.SetFlatRoom
	1,  // 6: examples.cflat.SetFlatResident.type:type_name -> examples.cflat.AccommodationType
	2,  // 7: examples.cflat.SetFlatRoom.type:type_name -> examples.cflat.RoomType
	8,  // 8: examples.cflat.FlatView.flat:type_name -> examples.cflat.Flat
	15, // 9: examples.cflat.FlatView.residents:type_name -> examples.cflat.FlatResidents
	18, // 10: examples.cflat.FlatView.rooms:type_name -> examples.cflat.FlatRooms
	0,  // 11: examples.cflat.Flat.type:type_name -> examples.cflat.PropertyType
	26, // 12: examples.cflat.Flat.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 13: examples.cflat.FlatResident.type:type_name -> examples.cflat.AccommodationType
	26, // 14: examples.cflat.FlatResident.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 15: examples.cflat.FlatRoom.type:type_name -> examples.cflat.RoomType
	26, // 16: examples.cflat.FlatRoom.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 17: examples.cflat.Flats.flats:type_name -> examples.cflat.Flat
	5,  // 18: examples.cflat.UpdateFlatResidentRequest.residents:type_name -> examples.cflat.SetFlatResident
	9,  // 19: examples.cflat.FlatResidents.residents:type_name -> examples.cflat.FlatResident
	6,  // 20: examples.cflat.UpdateFlatRoomRequest.rooms:type_name -> examples.cflat.SetFlatRoom
	10, // 21: examples.cflat.FlatRooms.rooms:type_name -> examples.cflat.FlatRoom
	0,  // 22: examples.cflat.FlatCreated.type:type_name -> examples.cflat.PropertyType
	0,  // 23: examples.cflat.FlatDeleted.type:type_name -> examples.cflat.PropertyType
	15, // 24: examples.cflat.FlatDeleted.residents:type_name -> examples.cflat.FlatResidents
	18, // 25: examples.cflat.FlatDeleted.rooms:type_name -> examples.cflat.FlatRooms
	0,  // 26: examples.cflat.FlatUpdated.type:type_name -> examples.cflat.PropertyType
	15, // 27: examples.cflat.FlatResidentsUpdated.residents:type_name -> examples.cflat.FlatResidents
	18, // 28: examples.cflat.FlatRoomsUpdated.rooms:type_name -> examples.cflat.FlatRooms
	3,  // 29: examples.cflat.CFlatService.CreateFlat:input_type -> examples.cflat.CreateFlatRequest
	4,  // 30: examples.cflat.CFlatService.UpdateFlat:input_type -> examples.cflat.UpdateFlatRequest
	11, // 31: examples.cflat.CFlatService.DeleteFlat:input_type -> examples.cflat.FlatId
	11, // 32: examples.cflat.CFlatService.GetFlat:input_type -> examples.cflat.FlatId
	11, // 33: examples.cflat.CFlatService.GetFlatView:input_type -> examples.cflat.FlatId
	27, // 34: examples.cflat.CFlatService.ListFlats:input_type -> google.protobuf.Empty
	13, // 35: examples.cflat.CFlatService.UpdateFlatResident:input_type -> examples.cflat.UpdateFlatResidentRequest
	14, // 36: examples.cflat.CFlatService.DeleteFlatResident:input_type -> examples.cflat.FlatResidentId
	14, // 37: examples.cflat.CFlatService.GetFlatResident:input_type -> examples.cflat.FlatResidentId
	11, // 38: examples.cflat.CFlatService.ListFlatResidents:input_type -> examples.cflat.FlatId
	16, // 39: examples.cflat.CFlatService.UpdateFlatRoom:input_type -> examples.cflat.UpdateFlatRoomRequest
	17, // 40: examples.cflat.CFlatService.DeleteFlatRoom:input_type -> examples.cflat.FlatRoomId
	17, // 41: examples.cflat.CFlatService.GetFlatRoom:input_type -> examples.cflat.FlatRoomId
	11, // 42: examples.cflat.CFlatService.ListFlatRooms:input_type -> examples.cflat.FlatId
	7,  // 43: examples.cflat.CFlatService.CreateFlat:output_type -> examples.cflat.FlatView
	7,  // 44: examples.cflat.CFlatService.UpdateFlat:output_type -> examples.cflat.FlatView
	7,  // 45: examples.cflat.CFlatService.DeleteFlat:output_type -> examples.cflat.FlatView
	8,  // 46: examples.cflat.CFlatService.GetFlat:output_type -> examples.cflat.Flat
	7,  // 47: examples.cflat.CFlatService.GetFlatView:output_type -> examples.cflat.FlatView
	12, // 48: examples.cflat.CFlatService.ListFlats:output_type -> examples.cflat.Flats
	9,  // 49: examples.cflat.CFlatService.UpdateFlatResident:output_type -> examples.cflat.FlatResident
	9,  // 50: examples.cflat.CFlatService.DeleteFlatResident:output_type -> examples.cflat.FlatResident
	9,  // 51: examples.cflat.CFlatService.GetFlatResident:output_type -> examples.cflat.FlatResident
	15, // 52: examples.cflat.CFlatService.ListFlatResidents:output_type -> examples.cflat.FlatResidents
	10, // 53: examples.cflat.CFlatService.UpdateFlatRoom:output_type -> examples.cflat.FlatRoom
	10, // 54: examples.cflat.CFlatService.DeleteFlatRoom:output_type -> examples.cflat.FlatRoom
	10, // 55: examples.cflat.CFlatService.GetFlatRoom:output_type -> examples.cflat.FlatRoom
	18, // 56: examples.cflat.CFlatService.ListFlatRooms:output_type -> examples.cflat.FlatRooms
	43, // [43:57] is the sub-list for method output_type
	29, // [29:43] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_cflat_proto_init() }
func file_cflat_proto_init() {
	if File_cflat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cflat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFlatResident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFlatRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatResident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlatResidentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatResidentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatResidents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlatRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatRoomId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatRooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatResidentsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatResidentsDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatRoomsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cflat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatRoomsDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cflat_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cflat_proto_goTypes,
		DependencyIndexes: file_cflat_proto_depIdxs,
		EnumInfos:         file_cflat_proto_enumTypes,
		MessageInfos:      file_cflat_proto_msgTypes,
	}.Build()
	File_cflat_proto = out.File
	file_cflat_proto_rawDesc = nil
	file_cflat_proto_goTypes = nil
	file_cflat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CFlatServiceClient is the client API for CFlatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CFlatServiceClient interface {
	CreateFlat(ctx context.Context, in *CreateFlatRequest, opts ...grpc.CallOption) (*FlatView, error)
	UpdateFlat(ctx context.Context, in *UpdateFlatRequest, opts ...grpc.CallOption) (*FlatView, error)
	DeleteFlat(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatView, error)
	GetFlat(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*Flat, error)
	GetFlatView(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatView, error)
	ListFlats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Flats, error)
	UpdateFlatResident(ctx context.Context, in *UpdateFlatResidentRequest, opts ...grpc.CallOption) (*FlatResident, error)
	DeleteFlatResident(ctx context.Context, in *FlatResidentId, opts ...grpc.CallOption) (*FlatResident, error)
	GetFlatResident(ctx context.Context, in *FlatResidentId, opts ...grpc.CallOption) (*FlatResident, error)
	ListFlatResidents(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatResidents, error)
	UpdateFlatRoom(ctx context.Context, in *UpdateFlatRoomRequest, opts ...grpc.CallOption) (*FlatRoom, error)
	DeleteFlatRoom(ctx context.Context, in *FlatRoomId, opts ...grpc.CallOption) (*FlatRoom, error)
	GetFlatRoom(ctx context.Context, in *FlatRoomId, opts ...grpc.CallOption) (*FlatRoom, error)
	ListFlatRooms(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatRooms, error)
}

type cFlatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCFlatServiceClient(cc grpc.ClientConnInterface) CFlatServiceClient {
	return &cFlatServiceClient{cc}
}

func (c *cFlatServiceClient) CreateFlat(ctx context.Context, in *CreateFlatRequest, opts ...grpc.CallOption) (*FlatView, error) {
	out := new(FlatView)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/CreateFlat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) UpdateFlat(ctx context.Context, in *UpdateFlatRequest, opts ...grpc.CallOption) (*FlatView, error) {
	out := new(FlatView)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/UpdateFlat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) DeleteFlat(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatView, error) {
	out := new(FlatView)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/DeleteFlat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) GetFlat(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*Flat, error) {
	out := new(Flat)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/GetFlat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) GetFlatView(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatView, error) {
	out := new(FlatView)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/GetFlatView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) ListFlats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Flats, error) {
	out := new(Flats)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/ListFlats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) UpdateFlatResident(ctx context.Context, in *UpdateFlatResidentRequest, opts ...grpc.CallOption) (*FlatResident, error) {
	out := new(FlatResident)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/UpdateFlatResident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) DeleteFlatResident(ctx context.Context, in *FlatResidentId, opts ...grpc.CallOption) (*FlatResident, error) {
	out := new(FlatResident)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/DeleteFlatResident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) GetFlatResident(ctx context.Context, in *FlatResidentId, opts ...grpc.CallOption) (*FlatResident, error) {
	out := new(FlatResident)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/GetFlatResident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) ListFlatResidents(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatResidents, error) {
	out := new(FlatResidents)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/ListFlatResidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) UpdateFlatRoom(ctx context.Context, in *UpdateFlatRoomRequest, opts ...grpc.CallOption) (*FlatRoom, error) {
	out := new(FlatRoom)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/UpdateFlatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) DeleteFlatRoom(ctx context.Context, in *FlatRoomId, opts ...grpc.CallOption) (*FlatRoom, error) {
	out := new(FlatRoom)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/DeleteFlatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) GetFlatRoom(ctx context.Context, in *FlatRoomId, opts ...grpc.CallOption) (*FlatRoom, error) {
	out := new(FlatRoom)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/GetFlatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFlatServiceClient) ListFlatRooms(ctx context.Context, in *FlatId, opts ...grpc.CallOption) (*FlatRooms, error) {
	out := new(FlatRooms)
	err := c.cc.Invoke(ctx, "/examples.cflat.CFlatService/ListFlatRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CFlatServiceServer is the server API for CFlatService service.
type CFlatServiceServer interface {
	CreateFlat(context.Context, *CreateFlatRequest) (*FlatView, error)
	UpdateFlat(context.Context, *UpdateFlatRequest) (*FlatView, error)
	DeleteFlat(context.Context, *FlatId) (*FlatView, error)
	GetFlat(context.Context, *FlatId) (*Flat, error)
	GetFlatView(context.Context, *FlatId) (*FlatView, error)
	ListFlats(context.Context, *emptypb.Empty) (*Flats, error)
	UpdateFlatResident(context.Context, *UpdateFlatResidentRequest) (*FlatResident, error)
	DeleteFlatResident(context.Context, *FlatResidentId) (*FlatResident, error)
	GetFlatResident(context.Context, *FlatResidentId) (*FlatResident, error)
	ListFlatResidents(context.Context, *FlatId) (*FlatResidents, error)
	UpdateFlatRoom(context.Context, *UpdateFlatRoomRequest) (*FlatRoom, error)
	DeleteFlatRoom(context.Context, *FlatRoomId) (*FlatRoom, error)
	GetFlatRoom(context.Context, *FlatRoomId) (*FlatRoom, error)
	ListFlatRooms(context.Context, *FlatId) (*FlatRooms, error)
}

// UnimplementedCFlatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCFlatServiceServer struct {
}

func (*UnimplementedCFlatServiceServer) CreateFlat(context.Context, *CreateFlatRequest) (*FlatView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlat not implemented")
}
func (*UnimplementedCFlatServiceServer) UpdateFlat(context.Context, *UpdateFlatRequest) (*FlatView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlat not implemented")
}
func (*UnimplementedCFlatServiceServer) DeleteFlat(context.Context, *FlatId) (*FlatView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlat not implemented")
}
func (*UnimplementedCFlatServiceServer) GetFlat(context.Context, *FlatId) (*Flat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlat not implemented")
}
func (*UnimplementedCFlatServiceServer) GetFlatView(context.Context, *FlatId) (*FlatView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlatView not implemented")
}
func (*UnimplementedCFlatServiceServer) ListFlats(context.Context, *emptypb.Empty) (*Flats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlats not implemented")
}
func (*UnimplementedCFlatServiceServer) UpdateFlatResident(context.Context, *UpdateFlatResidentRequest) (*FlatResident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlatResident not implemented")
}
func (*UnimplementedCFlatServiceServer) DeleteFlatResident(context.Context, *FlatResidentId) (*FlatResident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlatResident not implemented")
}
func (*UnimplementedCFlatServiceServer) GetFlatResident(context.Context, *FlatResidentId) (*FlatResident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlatResident not implemented")
}
func (*UnimplementedCFlatServiceServer) ListFlatResidents(context.Context, *FlatId) (*FlatResidents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlatResidents not implemented")
}
func (*UnimplementedCFlatServiceServer) UpdateFlatRoom(context.Context, *UpdateFlatRoomRequest) (*FlatRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlatRoom not implemented")
}
func (*UnimplementedCFlatServiceServer) DeleteFlatRoom(context.Context, *FlatRoomId) (*FlatRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlatRoom not implemented")
}
func (*UnimplementedCFlatServiceServer) GetFlatRoom(context.Context, *FlatRoomId) (*FlatRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlatRoom not implemented")
}
func (*UnimplementedCFlatServiceServer) ListFlatRooms(context.Context, *FlatId) (*FlatRooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlatRooms not implemented")
}

func RegisterCFlatServiceServer(s *grpc.Server, srv CFlatServiceServer) {
	s.RegisterService(&_CFlatService_serviceDesc, srv)
}

func _CFlatService_CreateFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).CreateFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/CreateFlat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).CreateFlat(ctx, req.(*CreateFlatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_UpdateFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).UpdateFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/UpdateFlat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).UpdateFlat(ctx, req.(*UpdateFlatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_DeleteFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).DeleteFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/DeleteFlat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).DeleteFlat(ctx, req.(*FlatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_GetFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).GetFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/GetFlat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).GetFlat(ctx, req.(*FlatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_GetFlatView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).GetFlatView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/GetFlatView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).GetFlatView(ctx, req.(*FlatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_ListFlats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).ListFlats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/ListFlats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).ListFlats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_UpdateFlatResident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlatResidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).UpdateFlatResident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/UpdateFlatResident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).UpdateFlatResident(ctx, req.(*UpdateFlatResidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_DeleteFlatResident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatResidentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).DeleteFlatResident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/DeleteFlatResident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).DeleteFlatResident(ctx, req.(*FlatResidentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_GetFlatResident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatResidentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).GetFlatResident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/GetFlatResident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).GetFlatResident(ctx, req.(*FlatResidentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_ListFlatResidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).ListFlatResidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/ListFlatResidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).ListFlatResidents(ctx, req.(*FlatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_UpdateFlatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).UpdateFlatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/UpdateFlatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).UpdateFlatRoom(ctx, req.(*UpdateFlatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_DeleteFlatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).DeleteFlatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/DeleteFlatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).DeleteFlatRoom(ctx, req.(*FlatRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_GetFlatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).GetFlatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/GetFlatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).GetFlatRoom(ctx, req.(*FlatRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFlatService_ListFlatRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFlatServiceServer).ListFlatRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.cflat.CFlatService/ListFlatRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFlatServiceServer).ListFlatRooms(ctx, req.(*FlatId))
	}
	return interceptor(ctx, in, info, handler)
}

var _CFlatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.cflat.CFlatService",
	HandlerType: (*CFlatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlat",
			Handler:    _CFlatService_CreateFlat_Handler,
		},
		{
			MethodName: "UpdateFlat",
			Handler:    _CFlatService_UpdateFlat_Handler,
		},
		{
			MethodName: "DeleteFlat",
			Handler:    _CFlatService_DeleteFlat_Handler,
		},
		{
			MethodName: "GetFlat",
			Handler:    _CFlatService_GetFlat_Handler,
		},
		{
			MethodName: "GetFlatView",
			Handler:    _CFlatService_GetFlatView_Handler,
		},
		{
			MethodName: "ListFlats",
			Handler:    _CFlatService_ListFlats_Handler,
		},
		{
			MethodName: "UpdateFlatResident",
			Handler:    _CFlatService_UpdateFlatResident_Handler,
		},
		{
			MethodName: "DeleteFlatResident",
			Handler:    _CFlatService_DeleteFlatResident_Handler,
		},
		{
			MethodName: "GetFlatResident",
			Handler:    _CFlatService_GetFlatResident_Handler,
		},
		{
			MethodName: "ListFlatResidents",
			Handler:    _CFlatService_ListFlatResidents_Handler,
		},
		{
			MethodName: "UpdateFlatRoom",
			Handler:    _CFlatService_UpdateFlatRoom_Handler,
		},
		{
			MethodName: "DeleteFlatRoom",
			Handler:    _CFlatService_DeleteFlatRoom_Handler,
		},
		{
			MethodName: "GetFlatRoom",
			Handler:    _CFlatService_GetFlatRoom_Handler,
		},
		{
			MethodName: "ListFlatRooms",
			Handler:    _CFlatService_ListFlatRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cflat.proto",
}
